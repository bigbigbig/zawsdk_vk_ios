// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name VKCaptchaSDK
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CoreMotion
import Foundation
import OSLog
import SafariServices
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers final public class Logger {
  @objc deinit
}
public enum VKCaptchaResultError : Swift.Error {
  case unknown
  case cancel
  case connection
  public static func == (a: VKCaptchaSDK.VKCaptchaResultError, b: VKCaptchaSDK.VKCaptchaResultError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CaptchaHandlingError : Swift.Error {
  case failedToCreateCaptchaData
  case noCaptcha
  case captchaError(any Swift.Error)
}
public enum VKCaptchaType {
  case domain(Swift.String)
  case `default`
}
public struct VKCaptchaData {
  public let type: VKCaptchaSDK.VKCaptchaType
}
public struct VKCaptchaToken {
  public let value: Swift.String
  public let type: VKCaptchaSDK.VKCaptchaType
}
public enum VKCaptchaConstants {
  public static let domainCaptchaHeaderName: Swift.String
  public static let defaultCaptchaParamName: Swift.String
}
final public class VKCaptchaHandler {
  public init()
  public static func getDomainToken(for domain: Swift.String) -> VKCaptchaSDK.VKCaptchaToken?
  final public func handleCaptcha(from response: Foundation.Data?, responseHeaders: [Swift.AnyHashable : Any]?, domain: Swift.String, with presenter: any VKCaptchaSDK.VKCaptchaPresenter = VKCaptchaNewUIWindowPresenter(), completion: @escaping (Swift.Result<VKCaptchaSDK.VKCaptchaToken, VKCaptchaSDK.CaptchaHandlingError>) -> Swift.Void)
  final public func handleCaptchaData(from response: Foundation.Data?, responseHeaders: [Swift.AnyHashable : Any]?, domain: Swift.String) -> Swift.Result<VKCaptchaSDK.VKCaptchaData, VKCaptchaSDK.CaptchaHandlingError>
  final public func openCaptcha(captchaData: VKCaptchaSDK.VKCaptchaData, presenter: any VKCaptchaSDK.VKCaptchaPresenter = VKCaptchaNewUIWindowPresenter(), completion: @escaping (Swift.Result<VKCaptchaSDK.VKCaptchaToken, VKCaptchaSDK.CaptchaHandlingError>) -> Swift.Void)
  final public func getCaptchaViewController(captchaData: VKCaptchaSDK.VKCaptchaData, completion: @escaping (Swift.Result<VKCaptchaSDK.VKCaptchaToken, VKCaptchaSDK.CaptchaHandlingError>) -> Swift.Void) -> UIKit.UIViewController?
  @objc deinit
}
extension Foundation.URLRequest {
  public enum AddingCaptchaTokenError : Swift.Error {
    case urlError
    public static func == (a: Foundation.URLRequest.AddingCaptchaTokenError, b: Foundation.URLRequest.AddingCaptchaTokenError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public mutating func addCaptchaToken(token: VKCaptchaSDK.VKCaptchaToken) throws
  public mutating func addDomainCaptcha(token: Swift.String)
  public mutating func addDefaultCaptcha(token: Swift.String) throws
}
public enum VKCaptchaPresentationStyle : Swift.Int {
  case modal
  case push
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol VKCaptchaPresenter : AnyObject {
  var presentingViewController: UIKit.UIViewController? { get }
  func navigate(viewController: UIKit.UIViewController, presentationStyle: VKCaptchaSDK.VKCaptchaPresentationStyle)
  func dismiss(viewController: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
}
extension VKCaptchaSDK.VKCaptchaPresenter {
  public func dismiss(viewController: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
}
@objc public class VKCaptchaPresenterDefault : ObjectiveC.NSObject, VKCaptchaSDK.VKCaptchaPresenter {
  public var presentingViewController: UIKit.UIViewController?
  public init(presentingViewController: UIKit.UIViewController)
  public func navigate(viewController: UIKit.UIViewController, presentationStyle: VKCaptchaSDK.VKCaptchaPresentationStyle)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class VKCaptchaNewUIWindowPresenter : ObjectiveC.NSObject, VKCaptchaSDK.VKCaptchaPresenter {
  public var presentingViewController: UIKit.UIViewController?
  @objc override dynamic public init()
  public func navigate(viewController: UIKit.UIViewController, presentationStyle: VKCaptchaSDK.VKCaptchaPresentationStyle)
  public func dismiss(viewController: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
  @objc deinit
}
public struct VKCaptchaConfiguration {
  public init(url: Foundation.URL)
}
@objc final public class VKCaptcha : ObjectiveC.NSObject {
  public init(configuration: VKCaptchaSDK.VKCaptchaConfiguration)
  public static func getHitmanToken(for domain: Swift.String) -> Swift.String?
  final public func getCaptchaViewController(completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void) -> UIKit.UIViewController
  final public func openCaptcha(presenter: any VKCaptchaSDK.VKCaptchaPresenter, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  final public func passChallenge(presenter: any VKCaptchaSDK.VKCaptchaPresenter, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  final public func passChallenge(completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void) -> UIKit.UIViewController
  final public func closeCaptcha(animated: Swift.Bool = true, completion: (() -> Swift.Void)?)
  @_spi(VKCaptchaDebug) final public func openDebug(presenter: any VKCaptchaSDK.VKCaptchaPresenter)
  @objc deinit
}
extension VKCaptchaSDK.VKCaptchaResultError : Swift.Equatable {}
extension VKCaptchaSDK.VKCaptchaResultError : Swift.Hashable {}
extension Foundation.URLRequest.AddingCaptchaTokenError : Swift.Equatable {}
extension Foundation.URLRequest.AddingCaptchaTokenError : Swift.Hashable {}
extension VKCaptchaSDK.VKCaptchaPresentationStyle : Swift.Equatable {}
extension VKCaptchaSDK.VKCaptchaPresentationStyle : Swift.Hashable {}
extension VKCaptchaSDK.VKCaptchaPresentationStyle : Swift.RawRepresentable {}
